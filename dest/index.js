class Result{constructor(s,e){this.val=s,this.isSuccessValue=e}}const Success=function(s){return new Result(s,!0)},Fail=function(s){return new Result(s,!1)},rules={required:e=>s=>null==s||"string"==typeof s&&0===s.trim().length?Fail(e):Success(s),email:e=>s=>/(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/.test(s)?Success(s):Fail(e),url:e=>s=>/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)/.test(s)?Success(s):Fail(e),cellphone:e=>s=>/^01\d[-\s]*\d{3,4}[-\s]*\d{4}$/.test(s)?Success(s):Fail(e),minLength:t=>e=>s=>s.trim().length>=t?Success(s):Fail(e),maxLength:t=>e=>s=>s.trim().length<=t?Success(s):Fail(e),gte:t=>e=>s=>t<=s?Success(s):Fail(e),lte:t=>e=>s=>s<=t?Success(s):Fail(e),gt:t=>e=>s=>t<s?Success(s):Fail(e),lt:t=>e=>s=>s<t?Success(s):Fail(e),regex:t=>e=>s=>t.test(s)?Success(s):Fail(e),numeric:e=>s=>"number"==typeof s||/^\d+$/.test(s)?Success(s):Fail(e),alphaNumeric:e=>s=>/^[\da-zA-Z]+$/.test(s)?Success(s):Fail(e),same:l=>(s=[])=>{const[e,...t]=s;return t.every(s=>s===e)?Success(s):Fail(l)},diff:e=>(s=[])=>[...new Set(s)].length===s.length?Success(s):Fail(e),custom:t=>e=>s=>t(s)?Success(s):Fail(e)};class ResultList{constructor(s){this._results=[],this._results=s}get isPassed(){return this._results.every(s=>s.isSuccessValue)}toArray(){return this._results.filter(s=>!s.isSuccessValue).map(s=>s.val)}toResult(){return this._results.filter(s=>!s.isSuccessValue)}getFirst(){return this.isPassed?"":this._results[0].val}getLast(){return this.isPassed?"":this._results[this._results.length-1].val}}const validator=(e,...s)=>new ResultList(s.map(s=>s(e))),F=s=>{s=s.map(s=>s.toResult()).flatMap(s=>s).filter(s=>!s.isSuccessValue);const t=0<s.length?s[0].val:"",l=0<s.length?s[s.length-1].val:"",a=0===s.length;return{messages:s.map(s=>s.val),firstMessage:t,lastMessage:l,isPassed:a,orFirst:(s,e)=>a?s():e(t),orLast:(s,e)=>a?s():e(l)}},r=rules,v=validator;export{F,r,v};
