const Result={__proto__:{init:function(e,s){this.val=e,this.isSuccessValue=s}}},Success=function(e){return new Result.init(e,!0)},Fail=function(e){return new Result.init(e,!1)},curry=function(e){return function s(...r){return e.length<=r.length?e.apply(this,r):function(...e){return s.apply(this,[...r,...e])}}},rules={required:curry(s=>e=>null==e||"string"==typeof e&&0===e.trim().length?Fail(s):Success(e)),email:curry(s=>e=>/(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/.test(e)?Success(e):Fail(s)),url:curry(s=>e=>/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)/.test(e)?Success(e):Fail(s)),cellphone:curry(s=>e=>/^01\d[-\s]*\d{3,4}[-\s]*\d{4}$/.test(e)?Success(e):Fail(s)),minLength:curry(r=>s=>e=>"string"==typeof e&&e.trim().length>=r?Success(e):Fail(s)),maxLength:curry(r=>s=>e=>"string"==typeof e&&e.trim().length<=r?Success(e):Fail(s)),gte:curry(r=>s=>e=>r<=e?Success(e):Fail(s)),lte:curry(r=>s=>e=>e<=r?Success(e):Fail(s)),gt:curry(r=>s=>e=>r<e?Success(e):Fail(s)),lt:curry(r=>s=>e=>e<r?Success(e):Fail(s)),regex:curry(r=>s=>e=>r.test(e)?Success(e):Fail(s)),numeric:curry(s=>e=>"number"==typeof e||/^\d+$/.test(e)?Success(e):Fail(s)),alphaNumeric:curry(s=>e=>/^[\da-zA-Z]+$/.test(e)?Success(e):Fail(s)),same:curry(t=>(e=[])=>{const[s,...r]=e;return r.every(e=>e===s)?Success(e):Fail(t)}),diff:curry(s=>(e=[])=>[...new Set(e)].length===e.length?Success(e):Fail(s)),custom:curry(r=>s=>e=>r(e)?Success(e):Fail(s))},FV=e=>{const s=e.map(s=>{const e=s.rules.map(e=>e(s.value));return{key:s.key,result:e,isPassed:e.every(({isSuccessValue:e})=>e)}});var e=Object.fromEntries(s.map(e=>[e.key,{messages:e.result.filter(e=>!e.isSuccessValue).map(({val:e})=>e),isPassed:e.isPassed}])),r=s.filter(e=>!e.isPassed).map(e=>e.result.filter(({isSuccessValue:e})=>!e).map(({val:e})=>e)).flat(),t=r.length;const c=0===t,u=c?"":r[0],a=c?"":r[t-1];return{result:e,messages:r,firstMessage:u,lastMessage:a,isPassed:c,orFirst:(e,s)=>c?e():s(u),orLast:(e,s)=>c?e():s(a)}},r=rules;export{FV,r};
